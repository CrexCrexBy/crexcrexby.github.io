@use "sass:math";
@use "sass:map";
@use "variables" as variable;

/// Функция плавного динамического изменения размеров объекта в пределах заданных размеров экрана
/// @param {Number} $min-size - минимальный размер объекта, меньше которого он не уменьшится
/// @param {Number} $max-size - максимальный размер объекта, больше которого он не увеличится
/// @param {Number} $min-breakpoint [640] - минимальный размер окна, на котором объект должен стать минимального размера
/// @param {Number} $max-breakpoint [1024] - максимальный размер окна, на котором объект должен стать максимального размера
/// @param {Boolean} $revers [false] - реверс изменения позволяет увеличить объект при уменьшении экрана и наоборот
/// @param {Number} $round [2] - число знаков, до которого будут округлены высчитанные значения
/// @param {String} $unit [vw] - единица измерения, отвечающая за направление расчета
@function fluid(
	$min-size,
	$max-size,
	$min-breakpoint: map.get(variable.$breakpoints, "xsmall"),
	$max-breakpoint: map.get(variable.$breakpoints, "medium"),
	$revers: false,
	$round: 4,
	$unit: vw
) {
	@if $revers == true {
		$temp: $min-breakpoint;
		$min-breakpoint: $max-breakpoint;
		$max-breakpoint: $temp;
	}
	$slope: math.div($max-size - $min-size, $max-breakpoint - $min-breakpoint);
	$slope-to-unit: round($slope * 100, $round);
	$intercept-rem: round(
		px-to-rem($min-size - $slope * $min-breakpoint),
		$round
	);
	$min-size-rem: round(px-to-rem($min-size), $round);
	$max-size-rem: round(px-to-rem($max-size), $round);
	@return clamp(
		#{$min-size-rem},
		#{$slope-to-unit}#{$unit} + #{$intercept-rem},
		#{$max-size-rem}
	);
}

/// Функция округляет число до количества знаков после запятой
/// @param {Number} $number - число, которое будет округлено
/// @param {Number} $decimals [0] - сколько знаком после запятой, до которых нужно округлить число
@function round($number, $decimals: 0) {
	$n: 1;
	@if $decimals > 0 {
		@for $i from 1 through $decimals {
			$n: $n * 10;
		}
	}
	@return math.div(math.round($number * $n), $n);
}

/// Функция превращает число-px в число-rem
/// @param {Number} $px - число-px, которое будет превращено в rem
/// @param {Number} $base-font-size [variable.$base-font-size] - базовый размер шрифта в px
@function px-to-rem($px, $base-font-size: variable.$base-font-size) {
	@return math.div($px, $base-font-size) * 1rem;
}
